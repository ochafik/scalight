diff --git a/src/library/scala/Product.scala b/src/library/scala/Product.scala
index 2c6838f..29f75cf 100644
--- a/src/library/scala/Product.scala
+++ b/src/library/scala/Product.scala
@@ -35,11 +35,12 @@ trait Product extends Any with Equals {
   /** An iterator over all the elements of this product.
    *  @return     in the default implementation, an `Iterator[Any]`
    */
-  def productIterator: Iterator[Any] = new scala.collection.AbstractIterator[Any] {
+  def productIterator: java.util.Iterator[Any] = new java.util.Iterator[Any] { 
     private var c: Int = 0
     private val cmax = productArity
     def hasNext = c < cmax
     def next() = { val result = productElement(c); c += 1; result }
+    def remove = ???
   }
 
   /** A string used in the `toString` methods of derived classes.
diff --git a/src/library/scala/runtime/ScalaRunTime.scala b/src/library/scala/runtime/ScalaRunTime.scala
index 1d8fe5e..8673158 100644
--- a/src/library/scala/runtime/ScalaRunTime.scala
+++ b/src/library/scala/runtime/ScalaRunTime.scala
@@ -9,13 +9,8 @@
 package scala
 package runtime
 
-import scala.collection.{ Seq, IndexedSeq, TraversableView, AbstractIterator }
-import scala.collection.mutable.WrappedArray
-import scala.collection.immutable.{ StringLike, NumericRange, List, Stream, Nil, :: }
-import scala.collection.generic.{ Sorted }
 import scala.reflect.{ ClassTag, classTag }
 import scala.util.control.ControlThrowable
-import scala.xml.{ Node, MetaData }
 import java.lang.{ Class => jClass }
 
 import java.lang.Double.doubleToLongBits
@@ -34,7 +29,7 @@ object ScalaRunTime {
     clazz.isArray && (atLevel == 1 || isArrayClass(clazz.getComponentType, atLevel - 1))
 
   def isValueClass(clazz: jClass[_]) = clazz.isPrimitive()
-  def isTuple(x: Any) = x != null && tupleNames(x.getClass.getName)
+  def isTuple(x: Any) = x != null && tupleNames.contains(x.getClass.getName)
   def isAnyVal(x: Any) = x match {
     case _: Byte | _: Short | _: Char | _: Int | _: Long | _: Float | _: Double | _: Boolean | _: Unit => true
     case _                                                                                             => false
@@ -42,12 +37,12 @@ object ScalaRunTime {
   // Avoiding boxing which messes up the specialized tests.  Don't ask.
   private val tupleNames = {
     var i = 22
-    var names: List[String] = Nil
+    var names = new java.util.HashSet[String]()
     while (i >= 1) {
-      names ::= ("scala.Tuple" + String.valueOf(i))
+      names.add("scala.Tuple" + String.valueOf(i))
       i -= 1
     }
-    names.toSet
+    names
   }
 
   /** Return the class object representing an array with element class `clazz`.
@@ -170,14 +165,48 @@ object ScalaRunTime {
   def checkInitialized[T <: AnyRef](x: T): T =
     if (x == null) throw new UninitializedError else x
 
+  private def mkString(it: java.util.Iterator[_], prefix: String, sep: String, suffix: String): String =
+    mkString(it, prefix, sep, suffix, -1, null)
+    
+  private def mkString(it: java.util.Iterator[_], prefix: String, sep: String, suffix: String, maxElements: Int, f: Any => String): String = {
+    val b = new StringBuilder(prefix)
+    var i = 0
+    while (it.hasNext && (maxElements < 0 || i < maxElements)) {
+      val v = it.next
+      b.append(if (f == null) v else f(v))
+      if (it.hasNext)
+        b.append(sep)
+    }
+    b.append(suffix)
+    b.toString
+  }
+  
+  private def mkString(it: Array[_], prefix: String, sep: String, suffix: String): String =
+    mkString(it, prefix, sep, suffix, -1, null)
+    
+  private def mkString(it: Array[_], prefix: String, sep: String, suffix: String, maxElements: Int, f: Any => String): String = {
+    val b = new StringBuilder(prefix)
+    var i = 0
+    val n = it.length
+    while (i < n && (maxElements < 0 || i < maxElements)) {
+      if (i != 0)
+        b.append(sep)
+      val v = it(i)
+      b.append(if (f == null) v else f(v))
+      i += 1
+    }
+    b.append(suffix)
+    b.toString
+  }
+  
   def _toString(x: Product): String =
-    x.productIterator.mkString(x.productPrefix + "(", ",", ")")
-
+    mkString(x.productIterator, x.productPrefix + "(", ",", ")")
+ 
   def _hashCode(x: Product): Int = scala.util.hashing.MurmurHash3.productHash(x)
 
   /** A helper for case classes. */
-  def typedProductIterator[T](x: Product): Iterator[T] = {
-    new AbstractIterator[T] {
+  def typedProductIterator[T](x: Product): java.util.Iterator[T] = {
+    new java.util.Iterator[T] {
       private var c: Int = 0
       private val cmax = x.productArity
       def hasNext = c < cmax
@@ -186,6 +215,7 @@ object ScalaRunTime {
         c += 1
         result.asInstanceOf[T]
       }
+      def remove = ???
     }
   }
 
@@ -199,7 +229,7 @@ object ScalaRunTime {
     else x.equals(y)
 
   def _equals(x: Product, y: Any): Boolean = y match {
-    case y: Product if x.productArity == y.productArity => x.productIterator sameElements y.productIterator
+    case y: Product if x.productArity == y.productArity => sameElements(x.productIterator, y.productIterator)
     case _                                              => false
   }
 
@@ -255,6 +285,44 @@ object ScalaRunTime {
    */
   def sameElements(xs1: scala.collection.Seq[Any], xs2: scala.collection.Seq[Any]) = xs1 sameElements xs2
 
+  def map(xs: java.util.Iterator[Any], f: Any => Any): java.util.Iterator[Any] = { 
+    new java.util.Iterator[Any] {
+      def hasNext = xs.hasNext
+      def next = f(xs.next)
+      def remove = ???
+    }
+  }
+  def sameElements(xs1: java.util.Iterator[Any], xs2: java.util.Iterator[Any]): Boolean = { 
+    while (xs1.hasNext && xs2.hasNext)
+      if (xs1.next != xs2.next)
+        return false
+
+    !xs1.hasNext && !xs2.hasNext
+  }
+
+  private def isSubClassOf(c: Class[_], className: String): Boolean = {
+    if (!c.isInterface) {
+      val intfs = c.getInterfaces
+      var i = 0
+      val n = intfs.length
+      while (i < n) {
+        val intf = intfs(i)
+        if (isSubClassOf(intf, className))
+          return true
+        i += 1
+      }
+    }
+    var cc = c
+    do {
+      if (cc.getName.equals(className))
+        return true
+        
+      cc = cc.getSuperclass
+    } while (cc != null)
+    
+    return false
+  }
+  
   /** Given any Scala value, convert it to a String.
    *
    * The primary motivation for this method is to provide a means for
@@ -277,24 +345,24 @@ object ScalaRunTime {
     def isScalaCompilerClass(x: AnyRef) = packageOf(x) startsWith "scala.tools.nsc."
 
     // When doing our own iteration is dangerous
-    def useOwnToString(x: Any) = x match {
+    def useOwnToString(x: Any) = (x.asInstanceOf[AnyRef] ne null) && (x.getClass match {
       // Node extends NodeSeq extends Seq[Node] and MetaData extends Iterable[MetaData]
-      case _: Node | _: MetaData => true
+      case c if isSubClassOf(c, "scala.xml.Node") || isSubClassOf(c, "scala.xml.MetaData") => true
       // Range/NumericRange have a custom toString to avoid walking a gazillion elements
-      case _: Range | _: NumericRange[_] => true
+      case c if isSubClassOf(c, "scala.collection.immutable.Range") || isSubClassOf(c, "scala.collection.immutable.NumericRange") => true
       // Sorted collections to the wrong thing (for us) on iteration - ticket #3493
-      case _: Sorted[_, _]  => true
+      case c if isSubClassOf(c, "scala.collection.generic.Sorted")  => true
       // StringBuilder(a, b, c) and similar not so attractive
-      case _: StringLike[_] => true
+      case c if isSubClassOf(c, "scala.collection.immutable.StringLike") => true
       // Don't want to evaluate any elements in a view
-      case _: TraversableView[_, _] => true
+      case c if isSubClassOf(c, "scala.collection.TraversableView") => true
       // Don't want to a) traverse infinity or b) be overly helpful with peoples' custom
       // collections which may have useful toString methods - ticket #3710
       // or c) print AbstractFiles which are somehow also Iterable[AbstractFile]s.
-      case x: Traversable[_] => !x.hasDefiniteSize || !isScalaClass(x) || isScalaCompilerClass(x)
+      case c if isSubClassOf(c, "scala.collection.Traversable") => !x.asInstanceOf[{ def hasDefiniteSize: Boolean }].hasDefiniteSize || !isScalaClass(x.asInstanceOf[AnyRef]) || isScalaCompilerClass(x.asInstanceOf[AnyRef])
       // Otherwise, nothing could possibly go wrong
       case _ => false
-    }
+    })
 
     // A variation on inner for maps so they print -> instead of bare tuples
     def mapInner(arg: Any): String = arg match {
@@ -307,7 +375,7 @@ object ScalaRunTime {
       if (x.getClass.getComponentType == classOf[BoxedUnit])
         0 until (array_length(x) min maxElements) map (_ => "()") mkString ("Array(", ", ", ")")
       else
-        WrappedArray make x take maxElements map inner mkString ("Array(", ", ", ")")
+        mkString(x.asInstanceOf[Array[_]], "Array(", ", ", ")", maxElements, inner(_))
     }
 
     // The recursively applied attempt to prettify Array printing.
@@ -320,11 +388,11 @@ object ScalaRunTime {
       case x: String                    => if (x.head.isWhitespace || x.last.isWhitespace) "\"" + x + "\"" else x
       case x if useOwnToString(x)       => x.toString
       case x: AnyRef if isArray(x)      => arrayToString(x)
-      case x: scala.collection.Map[_, _]      => x.iterator take maxElements map mapInner mkString (x.stringPrefix + "(", ", ", ")")
-      case x: Iterable[_]               => x.iterator take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
-      case x: Traversable[_]            => x take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
+      // TODO(ochafik) case x: scala.collection.Map[_, _]      => x.iterator take maxElements map mapInner mkString (x.stringPrefix + "(", ", ", ")")
+      case x: java.lang.Iterable[_]     => mkString(x.iterator, x.getClass.getSimpleName/*stringPrefix*/ + "(", ", ", ")", maxElements, inner(_))
+      // TODO(ochafik) case x: Traversable[_]            => x take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
       case x: Product1[_] if isTuple(x) => "(" + inner(x._1) + ",)" // that special trailing comma
-      case x: Product if isTuple(x)     => x.productIterator map inner mkString ("(", ",", ")")
+      case x: Product if isTuple(x)     => mkString(map(x.productIterator, inner(_)), "(", ",", ")")
       case x                            => x.toString
     }
 
@@ -343,6 +411,7 @@ object ScalaRunTime {
 
     nl + s + "\n"
   }
+  /* TODO(ochafik)
   private[scala] def checkZip(what: String, coll1: TraversableOnce[_], coll2: TraversableOnce[_]) {
     if (sys.props contains "scala.debug.zip") {
       val xs = coll1.toIndexedSeq
@@ -356,5 +425,5 @@ object ScalaRunTime {
         (new Exception).getStackTrace.drop(2).take(10).foreach(println)
       }
     }
-  }
+  }*/
 }
